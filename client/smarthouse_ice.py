# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `smarthouse.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SmartHouseIce
_M_SmartHouseIce = Ice.openModule('SmartHouseIce')
__name__ = 'SmartHouseIce'

_M_SmartHouseIce._t_Device = IcePy.defineValue('::SmartHouseIce::Device', Ice.Value, -1, (), False, True, None, ())

if 'DevicePrx' not in _M_SmartHouseIce.__dict__:
    _M_SmartHouseIce.DevicePrx = Ice.createTempClass()
    class DevicePrx(Ice.ObjectPrx):

        def isTurnedOn(self, context=None):
            return _M_SmartHouseIce.Device._op_isTurnedOn.invoke(self, ((), context))

        def isTurnedOnAsync(self, context=None):
            return _M_SmartHouseIce.Device._op_isTurnedOn.invokeAsync(self, ((), context))

        def begin_isTurnedOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouseIce.Device._op_isTurnedOn.begin(self, ((), _response, _ex, _sent, context))

        def end_isTurnedOn(self, _r):
            return _M_SmartHouseIce.Device._op_isTurnedOn.end(self, _r)

        def turnOn(self, context=None):
            return _M_SmartHouseIce.Device._op_turnOn.invoke(self, ((), context))

        def turnOnAsync(self, context=None):
            return _M_SmartHouseIce.Device._op_turnOn.invokeAsync(self, ((), context))

        def begin_turnOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouseIce.Device._op_turnOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOn(self, _r):
            return _M_SmartHouseIce.Device._op_turnOn.end(self, _r)

        def turnOff(self, context=None):
            return _M_SmartHouseIce.Device._op_turnOff.invoke(self, ((), context))

        def turnOffAsync(self, context=None):
            return _M_SmartHouseIce.Device._op_turnOff.invokeAsync(self, ((), context))

        def begin_turnOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouseIce.Device._op_turnOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOff(self, _r):
            return _M_SmartHouseIce.Device._op_turnOff.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHouseIce.DevicePrx.ice_checkedCast(proxy, '::SmartHouseIce::Device', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHouseIce.DevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHouseIce::Device'
    _M_SmartHouseIce._t_DevicePrx = IcePy.defineProxy('::SmartHouseIce::Device', DevicePrx)

    _M_SmartHouseIce.DevicePrx = DevicePrx
    del DevicePrx

    _M_SmartHouseIce.Device = Ice.createTempClass()
    class Device(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHouseIce::Device')

        def ice_id(self, current=None):
            return '::SmartHouseIce::Device'

        @staticmethod
        def ice_staticId():
            return '::SmartHouseIce::Device'

        def isTurnedOn(self, current=None):
            raise NotImplementedError("servant method 'isTurnedOn' not implemented")

        def turnOn(self, current=None):
            raise NotImplementedError("servant method 'turnOn' not implemented")

        def turnOff(self, current=None):
            raise NotImplementedError("servant method 'turnOff' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHouseIce._t_DeviceDisp)

        __repr__ = __str__

    _M_SmartHouseIce._t_DeviceDisp = IcePy.defineClass('::SmartHouseIce::Device', Device, (), None, ())
    Device._ice_type = _M_SmartHouseIce._t_DeviceDisp

    Device._op_isTurnedOn = IcePy.Operation('isTurnedOn', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    Device._op_turnOn = IcePy.Operation('turnOn', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, ())
    Device._op_turnOff = IcePy.Operation('turnOff', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, ())

    _M_SmartHouseIce.Device = Device
    del Device

if 'LightBulbMode' not in _M_SmartHouseIce.__dict__:
    _M_SmartHouseIce.LightBulbMode = Ice.createTempClass()
    class LightBulbMode(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            if _n in self._enumerators_str:
                return self._enumerators_str[_n]
            return None
        valueOf = classmethod(valueOf)

    LightBulbMode.NORMAL = LightBulbMode("NORMAL", 0)
    LightBulbMode.BLINK = LightBulbMode("BLINK", 1)
    LightBulbMode.BREATH = LightBulbMode("BREATH", 2)
    LightBulbMode.STROBE = LightBulbMode("STROBE", 3)
    LightBulbMode.COLORCYCLE = LightBulbMode("COLORCYCLE", 4)
    LightBulbMode._enumerators = { 0:LightBulbMode.NORMAL, 1:LightBulbMode.BLINK, 2:LightBulbMode.BREATH, 3:LightBulbMode.STROBE, 4:LightBulbMode.COLORCYCLE }
    LightBulbMode._enumerators_str = { "NORMAL":LightBulbMode.NORMAL, "BLINK":LightBulbMode.BLINK, "BREATH":LightBulbMode.BREATH, "STROBE":LightBulbMode.STROBE, "COLORCYCLE":LightBulbMode.COLORCYCLE }

    _M_SmartHouseIce._t_LightBulbMode = IcePy.defineEnum('::SmartHouseIce::LightBulbMode', LightBulbMode, (), LightBulbMode._enumerators)

    _M_SmartHouseIce.LightBulbMode = LightBulbMode
    del LightBulbMode

if 'Color' not in _M_SmartHouseIce.__dict__:
    _M_SmartHouseIce.Color = Ice.createTempClass()
    class Color(object):
        def __init__(self, r=0, g=0, b=0):
            self.r = r
            self.g = g
            self.b = b

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.r)
            _h = 5 * _h + Ice.getHash(self.g)
            _h = 5 * _h + Ice.getHash(self.b)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHouseIce.Color):
                return NotImplemented
            else:
                if self.r is None or other.r is None:
                    if self.r != other.r:
                        return (-1 if self.r is None else 1)
                else:
                    if self.r < other.r:
                        return -1
                    elif self.r > other.r:
                        return 1
                if self.g is None or other.g is None:
                    if self.g != other.g:
                        return (-1 if self.g is None else 1)
                else:
                    if self.g < other.g:
                        return -1
                    elif self.g > other.g:
                        return 1
                if self.b is None or other.b is None:
                    if self.b != other.b:
                        return (-1 if self.b is None else 1)
                else:
                    if self.b < other.b:
                        return -1
                    elif self.b > other.b:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHouseIce._t_Color)

        __repr__ = __str__

    _M_SmartHouseIce._t_Color = IcePy.defineStruct('::SmartHouseIce::Color', Color, (), (
        ('r', (), IcePy._t_int),
        ('g', (), IcePy._t_int),
        ('b', (), IcePy._t_int)
    ))

    _M_SmartHouseIce.Color = Color
    del Color

if 'InvalidColorException' not in _M_SmartHouseIce.__dict__:
    _M_SmartHouseIce.InvalidColorException = Ice.createTempClass()
    class InvalidColorException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHouseIce::InvalidColorException'

    _M_SmartHouseIce._t_InvalidColorException = IcePy.defineException('::SmartHouseIce::InvalidColorException', InvalidColorException, (), False, None, ())
    InvalidColorException._ice_type = _M_SmartHouseIce._t_InvalidColorException

    _M_SmartHouseIce.InvalidColorException = InvalidColorException
    del InvalidColorException

if 'InvalidBrightnessException' not in _M_SmartHouseIce.__dict__:
    _M_SmartHouseIce.InvalidBrightnessException = Ice.createTempClass()
    class InvalidBrightnessException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHouseIce::InvalidBrightnessException'

    _M_SmartHouseIce._t_InvalidBrightnessException = IcePy.defineException('::SmartHouseIce::InvalidBrightnessException', InvalidBrightnessException, (), False, None, ())
    InvalidBrightnessException._ice_type = _M_SmartHouseIce._t_InvalidBrightnessException

    _M_SmartHouseIce.InvalidBrightnessException = InvalidBrightnessException
    del InvalidBrightnessException

_M_SmartHouseIce._t_LightBulb = IcePy.defineValue('::SmartHouseIce::LightBulb', Ice.Value, -1, (), False, True, None, ())

if 'LightBulbPrx' not in _M_SmartHouseIce.__dict__:
    _M_SmartHouseIce.LightBulbPrx = Ice.createTempClass()
    class LightBulbPrx(_M_SmartHouseIce.DevicePrx):

        def getBrightness(self, context=None):
            return _M_SmartHouseIce.LightBulb._op_getBrightness.invoke(self, ((), context))

        def getBrightnessAsync(self, context=None):
            return _M_SmartHouseIce.LightBulb._op_getBrightness.invokeAsync(self, ((), context))

        def begin_getBrightness(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouseIce.LightBulb._op_getBrightness.begin(self, ((), _response, _ex, _sent, context))

        def end_getBrightness(self, _r):
            return _M_SmartHouseIce.LightBulb._op_getBrightness.end(self, _r)

        def setBrightness(self, newBrightness, context=None):
            return _M_SmartHouseIce.LightBulb._op_setBrightness.invoke(self, ((newBrightness, ), context))

        def setBrightnessAsync(self, newBrightness, context=None):
            return _M_SmartHouseIce.LightBulb._op_setBrightness.invokeAsync(self, ((newBrightness, ), context))

        def begin_setBrightness(self, newBrightness, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouseIce.LightBulb._op_setBrightness.begin(self, ((newBrightness, ), _response, _ex, _sent, context))

        def end_setBrightness(self, _r):
            return _M_SmartHouseIce.LightBulb._op_setBrightness.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHouseIce.LightBulbPrx.ice_checkedCast(proxy, '::SmartHouseIce::LightBulb', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHouseIce.LightBulbPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHouseIce::LightBulb'
    _M_SmartHouseIce._t_LightBulbPrx = IcePy.defineProxy('::SmartHouseIce::LightBulb', LightBulbPrx)

    _M_SmartHouseIce.LightBulbPrx = LightBulbPrx
    del LightBulbPrx

    _M_SmartHouseIce.LightBulb = Ice.createTempClass()
    class LightBulb(_M_SmartHouseIce.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHouseIce::Device', '::SmartHouseIce::LightBulb')

        def ice_id(self, current=None):
            return '::SmartHouseIce::LightBulb'

        @staticmethod
        def ice_staticId():
            return '::SmartHouseIce::LightBulb'

        def getBrightness(self, current=None):
            raise NotImplementedError("servant method 'getBrightness' not implemented")

        def setBrightness(self, newBrightness, current=None):
            raise NotImplementedError("servant method 'setBrightness' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHouseIce._t_LightBulbDisp)

        __repr__ = __str__

    _M_SmartHouseIce._t_LightBulbDisp = IcePy.defineClass('::SmartHouseIce::LightBulb', LightBulb, (), None, (_M_SmartHouseIce._t_DeviceDisp,))
    LightBulb._ice_type = _M_SmartHouseIce._t_LightBulbDisp

    LightBulb._op_getBrightness = IcePy.Operation('getBrightness', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    LightBulb._op_setBrightness = IcePy.Operation('setBrightness', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_SmartHouseIce._t_InvalidBrightnessException,))

    _M_SmartHouseIce.LightBulb = LightBulb
    del LightBulb

_M_SmartHouseIce._t_RGBLightBulb = IcePy.defineValue('::SmartHouseIce::RGBLightBulb', Ice.Value, -1, (), False, True, None, ())

if 'RGBLightBulbPrx' not in _M_SmartHouseIce.__dict__:
    _M_SmartHouseIce.RGBLightBulbPrx = Ice.createTempClass()
    class RGBLightBulbPrx(_M_SmartHouseIce.LightBulbPrx):

        def getColor(self, context=None):
            return _M_SmartHouseIce.RGBLightBulb._op_getColor.invoke(self, ((), context))

        def getColorAsync(self, context=None):
            return _M_SmartHouseIce.RGBLightBulb._op_getColor.invokeAsync(self, ((), context))

        def begin_getColor(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouseIce.RGBLightBulb._op_getColor.begin(self, ((), _response, _ex, _sent, context))

        def end_getColor(self, _r):
            return _M_SmartHouseIce.RGBLightBulb._op_getColor.end(self, _r)

        def setColor(self, r, g, b, context=None):
            return _M_SmartHouseIce.RGBLightBulb._op_setColor.invoke(self, ((r, g, b), context))

        def setColorAsync(self, r, g, b, context=None):
            return _M_SmartHouseIce.RGBLightBulb._op_setColor.invokeAsync(self, ((r, g, b), context))

        def begin_setColor(self, r, g, b, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouseIce.RGBLightBulb._op_setColor.begin(self, ((r, g, b), _response, _ex, _sent, context))

        def end_setColor(self, _r):
            return _M_SmartHouseIce.RGBLightBulb._op_setColor.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHouseIce.RGBLightBulbPrx.ice_checkedCast(proxy, '::SmartHouseIce::RGBLightBulb', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHouseIce.RGBLightBulbPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHouseIce::RGBLightBulb'
    _M_SmartHouseIce._t_RGBLightBulbPrx = IcePy.defineProxy('::SmartHouseIce::RGBLightBulb', RGBLightBulbPrx)

    _M_SmartHouseIce.RGBLightBulbPrx = RGBLightBulbPrx
    del RGBLightBulbPrx

    _M_SmartHouseIce.RGBLightBulb = Ice.createTempClass()
    class RGBLightBulb(_M_SmartHouseIce.LightBulb):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHouseIce::Device', '::SmartHouseIce::LightBulb', '::SmartHouseIce::RGBLightBulb')

        def ice_id(self, current=None):
            return '::SmartHouseIce::RGBLightBulb'

        @staticmethod
        def ice_staticId():
            return '::SmartHouseIce::RGBLightBulb'

        def getColor(self, current=None):
            raise NotImplementedError("servant method 'getColor' not implemented")

        def setColor(self, r, g, b, current=None):
            raise NotImplementedError("servant method 'setColor' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHouseIce._t_RGBLightBulbDisp)

        __repr__ = __str__

    _M_SmartHouseIce._t_RGBLightBulbDisp = IcePy.defineClass('::SmartHouseIce::RGBLightBulb', RGBLightBulb, (), None, (_M_SmartHouseIce._t_LightBulbDisp,))
    RGBLightBulb._ice_type = _M_SmartHouseIce._t_RGBLightBulbDisp

    RGBLightBulb._op_getColor = IcePy.Operation('getColor', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHouseIce._t_Color, False, 0), ())
    RGBLightBulb._op_setColor = IcePy.Operation('setColor', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_SmartHouseIce._t_InvalidColorException,))

    _M_SmartHouseIce.RGBLightBulb = RGBLightBulb
    del RGBLightBulb

_M_SmartHouseIce._t_MultiModeRGBLightBulb = IcePy.defineValue('::SmartHouseIce::MultiModeRGBLightBulb', Ice.Value, -1, (), False, True, None, ())

if 'MultiModeRGBLightBulbPrx' not in _M_SmartHouseIce.__dict__:
    _M_SmartHouseIce.MultiModeRGBLightBulbPrx = Ice.createTempClass()
    class MultiModeRGBLightBulbPrx(_M_SmartHouseIce.RGBLightBulbPrx):

        def getMode(self, context=None):
            return _M_SmartHouseIce.MultiModeRGBLightBulb._op_getMode.invoke(self, ((), context))

        def getModeAsync(self, context=None):
            return _M_SmartHouseIce.MultiModeRGBLightBulb._op_getMode.invokeAsync(self, ((), context))

        def begin_getMode(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouseIce.MultiModeRGBLightBulb._op_getMode.begin(self, ((), _response, _ex, _sent, context))

        def end_getMode(self, _r):
            return _M_SmartHouseIce.MultiModeRGBLightBulb._op_getMode.end(self, _r)

        def setMode(self, newMode, context=None):
            return _M_SmartHouseIce.MultiModeRGBLightBulb._op_setMode.invoke(self, ((newMode, ), context))

        def setModeAsync(self, newMode, context=None):
            return _M_SmartHouseIce.MultiModeRGBLightBulb._op_setMode.invokeAsync(self, ((newMode, ), context))

        def begin_setMode(self, newMode, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouseIce.MultiModeRGBLightBulb._op_setMode.begin(self, ((newMode, ), _response, _ex, _sent, context))

        def end_setMode(self, _r):
            return _M_SmartHouseIce.MultiModeRGBLightBulb._op_setMode.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHouseIce.MultiModeRGBLightBulbPrx.ice_checkedCast(proxy, '::SmartHouseIce::MultiModeRGBLightBulb', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHouseIce.MultiModeRGBLightBulbPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHouseIce::MultiModeRGBLightBulb'
    _M_SmartHouseIce._t_MultiModeRGBLightBulbPrx = IcePy.defineProxy('::SmartHouseIce::MultiModeRGBLightBulb', MultiModeRGBLightBulbPrx)

    _M_SmartHouseIce.MultiModeRGBLightBulbPrx = MultiModeRGBLightBulbPrx
    del MultiModeRGBLightBulbPrx

    _M_SmartHouseIce.MultiModeRGBLightBulb = Ice.createTempClass()
    class MultiModeRGBLightBulb(_M_SmartHouseIce.RGBLightBulb):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHouseIce::Device', '::SmartHouseIce::LightBulb', '::SmartHouseIce::MultiModeRGBLightBulb', '::SmartHouseIce::RGBLightBulb')

        def ice_id(self, current=None):
            return '::SmartHouseIce::MultiModeRGBLightBulb'

        @staticmethod
        def ice_staticId():
            return '::SmartHouseIce::MultiModeRGBLightBulb'

        def getMode(self, current=None):
            raise NotImplementedError("servant method 'getMode' not implemented")

        def setMode(self, newMode, current=None):
            raise NotImplementedError("servant method 'setMode' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHouseIce._t_MultiModeRGBLightBulbDisp)

        __repr__ = __str__

    _M_SmartHouseIce._t_MultiModeRGBLightBulbDisp = IcePy.defineClass('::SmartHouseIce::MultiModeRGBLightBulb', MultiModeRGBLightBulb, (), None, (_M_SmartHouseIce._t_RGBLightBulbDisp,))
    MultiModeRGBLightBulb._ice_type = _M_SmartHouseIce._t_MultiModeRGBLightBulbDisp

    MultiModeRGBLightBulb._op_getMode = IcePy.Operation('getMode', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHouseIce._t_LightBulbMode, False, 0), ())
    MultiModeRGBLightBulb._op_setMode = IcePy.Operation('setMode', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHouseIce._t_LightBulbMode, False, 0),), (), None, ())

    _M_SmartHouseIce.MultiModeRGBLightBulb = MultiModeRGBLightBulb
    del MultiModeRGBLightBulb

if 'PanTiltZoom' not in _M_SmartHouseIce.__dict__:
    _M_SmartHouseIce.PanTiltZoom = Ice.createTempClass()
    class PanTiltZoom(object):
        def __init__(self, panAngle=0, tiltAngle=0, zoom=0.0):
            self.panAngle = panAngle
            self.tiltAngle = tiltAngle
            self.zoom = zoom

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHouseIce.PanTiltZoom):
                return NotImplemented
            else:
                if self.panAngle != other.panAngle:
                    return False
                if self.tiltAngle != other.tiltAngle:
                    return False
                if self.zoom != other.zoom:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHouseIce._t_PanTiltZoom)

        __repr__ = __str__

    _M_SmartHouseIce._t_PanTiltZoom = IcePy.defineStruct('::SmartHouseIce::PanTiltZoom', PanTiltZoom, (), (
        ('panAngle', (), IcePy._t_int),
        ('tiltAngle', (), IcePy._t_int),
        ('zoom', (), IcePy._t_float)
    ))

    _M_SmartHouseIce.PanTiltZoom = PanTiltZoom
    del PanTiltZoom

if 'InvalidPanTiltZoomException' not in _M_SmartHouseIce.__dict__:
    _M_SmartHouseIce.InvalidPanTiltZoomException = Ice.createTempClass()
    class InvalidPanTiltZoomException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHouseIce::InvalidPanTiltZoomException'

    _M_SmartHouseIce._t_InvalidPanTiltZoomException = IcePy.defineException('::SmartHouseIce::InvalidPanTiltZoomException', InvalidPanTiltZoomException, (), False, None, ())
    InvalidPanTiltZoomException._ice_type = _M_SmartHouseIce._t_InvalidPanTiltZoomException

    _M_SmartHouseIce.InvalidPanTiltZoomException = InvalidPanTiltZoomException
    del InvalidPanTiltZoomException

_M_SmartHouseIce._t_SurveillanceCamera = IcePy.defineValue('::SmartHouseIce::SurveillanceCamera', Ice.Value, -1, (), False, True, None, ())

if 'SurveillanceCameraPrx' not in _M_SmartHouseIce.__dict__:
    _M_SmartHouseIce.SurveillanceCameraPrx = Ice.createTempClass()
    class SurveillanceCameraPrx(_M_SmartHouseIce.DevicePrx):

        def isRecording(self, context=None):
            return _M_SmartHouseIce.SurveillanceCamera._op_isRecording.invoke(self, ((), context))

        def isRecordingAsync(self, context=None):
            return _M_SmartHouseIce.SurveillanceCamera._op_isRecording.invokeAsync(self, ((), context))

        def begin_isRecording(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouseIce.SurveillanceCamera._op_isRecording.begin(self, ((), _response, _ex, _sent, context))

        def end_isRecording(self, _r):
            return _M_SmartHouseIce.SurveillanceCamera._op_isRecording.end(self, _r)

        def startRecording(self, context=None):
            return _M_SmartHouseIce.SurveillanceCamera._op_startRecording.invoke(self, ((), context))

        def startRecordingAsync(self, context=None):
            return _M_SmartHouseIce.SurveillanceCamera._op_startRecording.invokeAsync(self, ((), context))

        def begin_startRecording(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouseIce.SurveillanceCamera._op_startRecording.begin(self, ((), _response, _ex, _sent, context))

        def end_startRecording(self, _r):
            return _M_SmartHouseIce.SurveillanceCamera._op_startRecording.end(self, _r)

        def stopRecording(self, context=None):
            return _M_SmartHouseIce.SurveillanceCamera._op_stopRecording.invoke(self, ((), context))

        def stopRecordingAsync(self, context=None):
            return _M_SmartHouseIce.SurveillanceCamera._op_stopRecording.invokeAsync(self, ((), context))

        def begin_stopRecording(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouseIce.SurveillanceCamera._op_stopRecording.begin(self, ((), _response, _ex, _sent, context))

        def end_stopRecording(self, _r):
            return _M_SmartHouseIce.SurveillanceCamera._op_stopRecording.end(self, _r)

        def takePicture(self, context=None):
            return _M_SmartHouseIce.SurveillanceCamera._op_takePicture.invoke(self, ((), context))

        def takePictureAsync(self, context=None):
            return _M_SmartHouseIce.SurveillanceCamera._op_takePicture.invokeAsync(self, ((), context))

        def begin_takePicture(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouseIce.SurveillanceCamera._op_takePicture.begin(self, ((), _response, _ex, _sent, context))

        def end_takePicture(self, _r):
            return _M_SmartHouseIce.SurveillanceCamera._op_takePicture.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHouseIce.SurveillanceCameraPrx.ice_checkedCast(proxy, '::SmartHouseIce::SurveillanceCamera', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHouseIce.SurveillanceCameraPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHouseIce::SurveillanceCamera'
    _M_SmartHouseIce._t_SurveillanceCameraPrx = IcePy.defineProxy('::SmartHouseIce::SurveillanceCamera', SurveillanceCameraPrx)

    _M_SmartHouseIce.SurveillanceCameraPrx = SurveillanceCameraPrx
    del SurveillanceCameraPrx

    _M_SmartHouseIce.SurveillanceCamera = Ice.createTempClass()
    class SurveillanceCamera(_M_SmartHouseIce.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHouseIce::Device', '::SmartHouseIce::SurveillanceCamera')

        def ice_id(self, current=None):
            return '::SmartHouseIce::SurveillanceCamera'

        @staticmethod
        def ice_staticId():
            return '::SmartHouseIce::SurveillanceCamera'

        def isRecording(self, current=None):
            raise NotImplementedError("servant method 'isRecording' not implemented")

        def startRecording(self, current=None):
            raise NotImplementedError("servant method 'startRecording' not implemented")

        def stopRecording(self, current=None):
            raise NotImplementedError("servant method 'stopRecording' not implemented")

        def takePicture(self, current=None):
            raise NotImplementedError("servant method 'takePicture' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHouseIce._t_SurveillanceCameraDisp)

        __repr__ = __str__

    _M_SmartHouseIce._t_SurveillanceCameraDisp = IcePy.defineClass('::SmartHouseIce::SurveillanceCamera', SurveillanceCamera, (), None, (_M_SmartHouseIce._t_DeviceDisp,))
    SurveillanceCamera._ice_type = _M_SmartHouseIce._t_SurveillanceCameraDisp

    SurveillanceCamera._op_isRecording = IcePy.Operation('isRecording', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    SurveillanceCamera._op_startRecording = IcePy.Operation('startRecording', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, ())
    SurveillanceCamera._op_stopRecording = IcePy.Operation('stopRecording', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, ())
    SurveillanceCamera._op_takePicture = IcePy.Operation('takePicture', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_SmartHouseIce.SurveillanceCamera = SurveillanceCamera
    del SurveillanceCamera

_M_SmartHouseIce._t_PTZSurveillanceCamera = IcePy.defineValue('::SmartHouseIce::PTZSurveillanceCamera', Ice.Value, -1, (), False, True, None, ())

if 'PTZSurveillanceCameraPrx' not in _M_SmartHouseIce.__dict__:
    _M_SmartHouseIce.PTZSurveillanceCameraPrx = Ice.createTempClass()
    class PTZSurveillanceCameraPrx(_M_SmartHouseIce.SurveillanceCameraPrx):

        def getPanTiltZoom(self, context=None):
            return _M_SmartHouseIce.PTZSurveillanceCamera._op_getPanTiltZoom.invoke(self, ((), context))

        def getPanTiltZoomAsync(self, context=None):
            return _M_SmartHouseIce.PTZSurveillanceCamera._op_getPanTiltZoom.invokeAsync(self, ((), context))

        def begin_getPanTiltZoom(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouseIce.PTZSurveillanceCamera._op_getPanTiltZoom.begin(self, ((), _response, _ex, _sent, context))

        def end_getPanTiltZoom(self, _r):
            return _M_SmartHouseIce.PTZSurveillanceCamera._op_getPanTiltZoom.end(self, _r)

        def setPanTiltZoom(self, panAngle, tiltAngle, zoom, context=None):
            return _M_SmartHouseIce.PTZSurveillanceCamera._op_setPanTiltZoom.invoke(self, ((panAngle, tiltAngle, zoom), context))

        def setPanTiltZoomAsync(self, panAngle, tiltAngle, zoom, context=None):
            return _M_SmartHouseIce.PTZSurveillanceCamera._op_setPanTiltZoom.invokeAsync(self, ((panAngle, tiltAngle, zoom), context))

        def begin_setPanTiltZoom(self, panAngle, tiltAngle, zoom, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouseIce.PTZSurveillanceCamera._op_setPanTiltZoom.begin(self, ((panAngle, tiltAngle, zoom), _response, _ex, _sent, context))

        def end_setPanTiltZoom(self, _r):
            return _M_SmartHouseIce.PTZSurveillanceCamera._op_setPanTiltZoom.end(self, _r)

        def resetPanTiltZoom(self, context=None):
            return _M_SmartHouseIce.PTZSurveillanceCamera._op_resetPanTiltZoom.invoke(self, ((), context))

        def resetPanTiltZoomAsync(self, context=None):
            return _M_SmartHouseIce.PTZSurveillanceCamera._op_resetPanTiltZoom.invokeAsync(self, ((), context))

        def begin_resetPanTiltZoom(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHouseIce.PTZSurveillanceCamera._op_resetPanTiltZoom.begin(self, ((), _response, _ex, _sent, context))

        def end_resetPanTiltZoom(self, _r):
            return _M_SmartHouseIce.PTZSurveillanceCamera._op_resetPanTiltZoom.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHouseIce.PTZSurveillanceCameraPrx.ice_checkedCast(proxy, '::SmartHouseIce::PTZSurveillanceCamera', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHouseIce.PTZSurveillanceCameraPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHouseIce::PTZSurveillanceCamera'
    _M_SmartHouseIce._t_PTZSurveillanceCameraPrx = IcePy.defineProxy('::SmartHouseIce::PTZSurveillanceCamera', PTZSurveillanceCameraPrx)

    _M_SmartHouseIce.PTZSurveillanceCameraPrx = PTZSurveillanceCameraPrx
    del PTZSurveillanceCameraPrx

    _M_SmartHouseIce.PTZSurveillanceCamera = Ice.createTempClass()
    class PTZSurveillanceCamera(_M_SmartHouseIce.SurveillanceCamera):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHouseIce::Device', '::SmartHouseIce::PTZSurveillanceCamera', '::SmartHouseIce::SurveillanceCamera')

        def ice_id(self, current=None):
            return '::SmartHouseIce::PTZSurveillanceCamera'

        @staticmethod
        def ice_staticId():
            return '::SmartHouseIce::PTZSurveillanceCamera'

        def getPanTiltZoom(self, current=None):
            raise NotImplementedError("servant method 'getPanTiltZoom' not implemented")

        def setPanTiltZoom(self, panAngle, tiltAngle, zoom, current=None):
            raise NotImplementedError("servant method 'setPanTiltZoom' not implemented")

        def resetPanTiltZoom(self, current=None):
            raise NotImplementedError("servant method 'resetPanTiltZoom' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHouseIce._t_PTZSurveillanceCameraDisp)

        __repr__ = __str__

    _M_SmartHouseIce._t_PTZSurveillanceCameraDisp = IcePy.defineClass('::SmartHouseIce::PTZSurveillanceCamera', PTZSurveillanceCamera, (), None, (_M_SmartHouseIce._t_SurveillanceCameraDisp,))
    PTZSurveillanceCamera._ice_type = _M_SmartHouseIce._t_PTZSurveillanceCameraDisp

    PTZSurveillanceCamera._op_getPanTiltZoom = IcePy.Operation('getPanTiltZoom', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHouseIce._t_PanTiltZoom, False, 0), ())
    PTZSurveillanceCamera._op_setPanTiltZoom = IcePy.Operation('setPanTiltZoom', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_float, False, 0)), (), None, (_M_SmartHouseIce._t_InvalidPanTiltZoomException,))
    PTZSurveillanceCamera._op_resetPanTiltZoom = IcePy.Operation('resetPanTiltZoom', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_SmartHouseIce.PTZSurveillanceCamera = PTZSurveillanceCamera
    del PTZSurveillanceCamera

# End of module SmartHouseIce
